DROP TABLE Students;
DROP TABLE Courses;
DROP TABLE Enrollments;
DROP SEQUENCE seq_student_id;

-- 0.search SEQUENCE
SELECT seq_student_id.NEXTVAL FROM dual;
--  1. T·∫°o SEQUENCE
CREATE SEQUENCE seq_student_id START WITH 1 INCREMENT BY 1;
--  2. T·∫°o b·∫£ng Students (s·ª≠ d·ª•ng sequence)
CREATE TABLE Students (
    student_id NUMBER PRIMARY KEY,
    name VARCHAR2(50),
    email VARCHAR2(100)
);
--  3. T·∫°o b·∫£ng Courses
CREATE TABLE Courses (
    course_id NUMBER PRIMARY KEY,
    course_name VARCHAR2(100),
    credit NUMBER CHECK (credit BETWEEN 1 AND 5) 
    -- one check clause 
    -- trong ti·∫øng anh credit l√† t√≠n ch·ªâ
);
-- üîπ 4. T·∫°o b·∫£ng Enrollments (c√≥ kh√≥a ngo·∫°i)
CREATE TABLE Enrollments (
    enrollment_id NUMBER PRIMARY KEY,
    student_id NUMBER,
    course_id NUMBER,
    grade CHAR(2),
    -- C√≥ 2 r√†ng bu·ªôc kh√≥a ngo·∫°i At least one foreign key
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
-- ‚úÖ Th√™m d·ªØ li·ªáu (√≠t nh·∫•t 5 d√≤ng m·ªói b·∫£ng, c√≥ null)
-- üîπ Students
INSERT INTO Students VALUES (seq_student_id.NEXTVAL, 'Nguyen Van A', 'a@example.com');
INSERT INTO Students VALUES (seq_student_id.NEXTVAL, 'Tran Thi B', NULL);
INSERT INTO Students VALUES (seq_student_id.NEXTVAL, 'Le Van C', 'c@example.com');
INSERT INTO Students VALUES (seq_student_id.NEXTVAL, 'Pham Thi D', NULL);
INSERT INTO Students VALUES (seq_student_id.NEXTVAL, 'Hoang Van E', 'e@example.com');
SELECT * FROM STUDENTS;
-- üîπ Courses
INSERT INTO Courses VALUES (101, 'Math', NULL);
INSERT INTO Courses VALUES (102, 'Physics', 4);
INSERT INTO Courses VALUES (103, 'Chemistry', NULL);
INSERT INTO Courses VALUES (104, 'Biology', 2);
INSERT INTO Courses VALUES (105, 'English', 5);
SELECT * FROM COURSES;
-- üîπ Enrollments
INSERT INTO Enrollments VALUES (1, 1, 101, 'A');
INSERT INTO Enrollments VALUES (2, 2, 102, NULL);
INSERT INTO Enrollments VALUES (3, 3, 103, 'B');
INSERT INTO Enrollments VALUES (4, 4, 104, NULL);
INSERT INTO Enrollments VALUES (5, 5, 105, 'C');
SELECT * FROM ENROLLMENTS;
-- ‚úÖ Th·ª±c hi·ªán 10 c√¢u SQL
-- 1. Hi·ªÉn th·ªã t·∫•t c·∫£ b·∫£n ghi c·ªßa Students
SELECT * FROM Students;
-- 2. Hi·ªÉn th·ªã t·∫•t c·∫£ b·∫£n ghi c·ªßa Courses
SELECT * FROM Courses;
-- 3. Hi·ªÉn th·ªã t·∫•t c·∫£ b·∫£n ghi c·ªßa Enrollments
SELECT * FROM Enrollments;
-- 4. Ki·ªÉm tra r√†ng bu·ªôc FOREIGN KEY 
SELECT * FROM Enrollments 
WHERE student_id NOT IN (SELECT student_id FROM Students)
   OR course_id NOT IN (SELECT course_id FROM Courses);
-- C√¢u l·ªánh n√†y ki·ªÉm tra c√°c b·∫£n ghi trong b·∫£ng Enrollments ƒë·ªÉ t√¨m nh·ªØng b·∫£n ghi c√≥ kh√≥a ngo·∫°i kh√¥ng h·ª£p l·ªá. 
-- C·ª• th·ªÉ, n√≥ t√¨m c√°c b·∫£n ghi m√† student_id kh√¥ng t·ªìn t·∫°i trong b·∫£ng Students ho·∫∑c course_id kh√¥ng t·ªìn t·∫°i trong b·∫£ng Courses.
-- N·∫øu c√≥ b·∫£n ghi n√†o kh√¥ng th·ªèa m√£n c√°c r√†ng bu·ªôc kh√≥a ngo·∫°i, c√¢u l·ªánh s·∫Ω tr·∫£ v·ªÅ nh·ªØng b·∫£n ghi ƒë√≥.
-- 5. JOIN 3 b·∫£ng: Students, Enrollments, Courses
SELECT s.name, c.course_name, e.grade
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id;
-- 6. S·ª≠ d·ª•ng to√°n t·ª≠ T·∫¨P H·ª¢P (SET OPERATOR - UNION)
SELECT name FROM Students WHERE student_id <= 2
UNION
SELECT name FROM Students WHERE student_id >= 4;
-- 7. S·ª≠ d·ª•ng IS NULL (t√¨m sinh vi√™n ch∆∞a c√≥ email)
SELECT * FROM Students WHERE email IS NULL;
-- 8. S·ª≠ d·ª•ng ORDER BY (s·∫Øp x·∫øp sinh vi√™n theo t√™n)
SELECT * FROM Students ORDER BY name ASC;
-- 9. T√≠nh t·ªïng s·ªë sinh vi√™n ƒëƒÉng k√Ω cho m·ªói m√¥n h·ªçc
SELECT c.course_name, COUNT(e.enrollment_id) AS total_students
FROM Courses c
LEFT JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name;
-- 10. L·∫•y t·∫•t c·∫£ h·ªçc vi√™n h·ªçc m√¥n c√≥ s·ªë t√≠n ch·ªâ >= 4
SELECT s.name, c.course_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
WHERE c.credit >= 4;